const std = @import("std");

pub const ModifierFlags = struct { shift: bool, control: bool, option: bool, command: bool, caps: bool, function: bool };
pub fn virtKeyCodeToKeyboard(keyCode: i64, flags: ModifierFlags) []const u8 {
    switch (keyCode) {
        49 => return "[SPACE]",
        122 => return "[F1]",
        120 => return "[F2]",
        99 => return "[F3]",
        118 => return "[F4]",
        96 => return "[F5]",
        97 => return "[F6]",
        98 => return "[F7]",
        100 => return "[F8]",
        101 => return "[F9]",
        109 => return "[F10]",
        103 => return "[F11]",
        111 => return "[F12]",
        105 => return "[F13]",
        107 => return "[F14]",
        113 => return "[F15]",
        106 => return "[F16]",
        64 => return "[F17]",
        79 => return "[F18]",
        80 => return "[F19]",
        90 => return "[F20]",
        53 => return "[ESC]",
        51 => return "[DELETE]",
        48 => return "[TAB]",
        36 => return "[RETURN]",
        126 => return "[UP]",
        125 => return "[DOWN]",
        123 => return "[LEFT]",
        124 => return "[RIGHT]",
        else => {},
    }

    if (flags.shift or flags.caps) {
        switch (keyCode) {
            0 => return "A",
            11 => return "B",
            8 => return "C",
            2 => return "D",
            14 => return "E",
            3 => return "F",
            5 => return "G",
            4 => return "H",
            34 => return "I",
            38 => return "J",
            40 => return "K",
            37 => return "L",
            46 => return "M",
            45 => return "N",
            31 => return "O",
            35 => return "P",
            12 => return "Q",
            15 => return "R",
            1 => return "S",
            17 => return "T",
            32 => return "U",
            9 => return "V",
            13 => return "W",
            7 => return "X",
            16 => return "Y",
            6 => return "Z",
            else => {},
        }
    }

    if (flags.shift) {
        switch (keyCode) {
            44 => return "?",
            18 => return "!",
            19 => return "@",
            20 => return "#",
            21 => return "$",
            23 => return "%",
            22 => return "^",
            26 => return "&",
            28 => return "*",
            25 => return "(",
            29 => return ")",
            27 => return "_",
            24 => return "+",
            33 => return "{",
            30 => return "}",
            42 => return "|",
            50 => return "~",
            41 => return ":",
            39 => return "\"",
            43 => return "<",
            47 => return ">",
            else => {},
        }
    }

    switch (keyCode) {
        0 => return "a",
        11 => return "b",
        8 => return "c",
        2 => return "d",
        14 => return "e",
        3 => return "f",
        5 => return "g",
        4 => return "h",
        34 => return "i",
        38 => return "j",
        40 => return "k",
        37 => return "l",
        46 => return "m",
        45 => return "n",
        31 => return "o",
        35 => return "p",
        12 => return "q",
        15 => return "r",
        1 => return "s",
        17 => return "t",
        32 => return "u",
        9 => return "v",
        13 => return "w",
        7 => return "x",
        16 => return "y",
        6 => return "z",
        44 => return "/",
        18 => return "1",
        19 => return "2",
        20 => return "3",
        21 => return "4",
        23 => return "5",
        22 => return "6",
        26 => return "7",
        28 => return "8",
        25 => return "9",
        29 => return "0",
        27 => return "-",
        24 => return "=",
        33 => return "[",
        30 => return "]",
        42 => return "\\",
        50 => return "`",
        41 => return ";",
        39 => return "'",
        43 => return ",",
        47 => return ".",
        else => {},
    }

    std.debug.print("DBG: unknown key code {d}\n", .{keyCode});
    return "[UNKNOWN]";
}
